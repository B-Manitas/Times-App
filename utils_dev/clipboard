// Librairies

// Main app properties
import { ColorsApp } from '../utils/app_properties'

 ====================
 
 screenOptions={{cardStyle:{backgroundColor:ColorsApp.bg}}}

 ====================


// Style Component
const styles = StyleSheet.create({
  container: {

  },
});



=====================
    // console.log(itemState);
    // addWorkout(itemState);
    // handleMode(false);
    setItemState(item);

 styleContainer={styles.containerDayBox}
 styleContainer={styles.containerDayBox}
 styleContainer={styles.containerDayBox}
 styleContainer={styles.containerDayBox}
 styleContainer={styles.containerDayBox}
 styleContainer={styles.containerDayBox}
 styleContainer={styles.containerDayBox}

 add a title to your workout


   const item = {
    id: 0,
    title: '',
    round: '',
    series: [],
    days: {
      "Monday": false, "Tuesday": false, "Wednesday": false, 
      "Thursday": false, "Friday": false, "Saturday": false, 
      "Sunday": false
    }
  };


=======================
    // setItemState(prevItemState => 
    //   {
    //     prevItemState.map(
    //       (id) => {
    //         if (id===idDay) {
    //           {}
    //         }
    //       }
    //     )
    //   }
    //   // ({...prevItemState, days[idDay]:isActive})
    // );

    // setItemState(prevItemState => ({...prevItemState, days[idDay]:isActive}));


=================================================
  <TextInput 
  autoCorrect={false} autoCapitalize='sentences' maxLength={20}
  style={styles.textInputName} multiline={true}
  placeholder={EnTranslate.plh_workoutName} placeholderTextColor={ColorsApp.dark_font_2}
  enablesReturnKeyAutomatically={true} defaultValue={itemState.title}
  onChangeText={text => setItemState(prevItemState => ({...prevItemState, title:text}))}
  />

  <Text style={styles.subtitle}>Your trainig days :</Text>
  <WidgetFlexContainer>
    <WidgetCheckBox text='Mo.' state={initialState.days[0]} isCheckAction={(isChecked) => setDayActive(0, isChecked)}/>
    <WidgetCheckBox text='Tu.' state={initialState.days[1]} isCheckAction={(isChecked) => setDayActive(1, isChecked)}/>
    <WidgetCheckBox text='We.' state={initialState.days[2]} isCheckAction={(isChecked) => setDayActive(2, isChecked)}/>
    <WidgetCheckBox text='Th.' state={initialState.days[3]} isCheckAction={(isChecked) => setDayActive(3, isChecked)}/>
    <WidgetCheckBox text='Fr.' state={initialState.days[4]} isCheckAction={(isChecked) => setDayActive(4, isChecked)}/>
    <WidgetCheckBox text='Sa.' state={initialState.days[5]} isCheckAction={(isChecked) => setDayActive(5, isChecked)}/>
    <WidgetCheckBox text='Su.' state={initialState.days[6]} isCheckAction={(isChecked) => setDayActive(6, isChecked)}/>
  </WidgetFlexContainer>

  <View style={styles.containerFlex}>
    <Text style={styles.subtitle}>Enter the number of round :</Text>
    <TextInput placeholder='0' keyboardType='number-pad' style={styles.textInputRound}
    maxLength={10} defaultValue={itemState.round}
    onChangeText={text => setItemState(prevItemState => ({...prevItemState, round:text}))}/>
  </View>
  
  <Text style={styles.subtitle}>Yours series :</Text>





==============

  itemState.series.length === 0